generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Church {
  id                String              @id @default(cuid())
  name              String
  fantasy           String?
  cnpj              String
  ie                String              @default("ISENTO")
  email             String?             @unique
  phone             String?
  shepherd          String
  image             String?
  active            Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  PersonsOnChurches PersonsOnChurches[]
  Teacher           Teacher[]
  CourseGroup       CourseGroup[]

  @@map("Churches")
}

model Person {
  id                       String                     @id @default(cuid())
  name                     String
  genre                    String                     @default("M")
  birth                    DateTime?
  photo                    String?
  email                    String?                    @unique
  password                 String
  loginAttempts            Int                        @default(3)
  statsLogin               String                     @default("unchekble")
  inRecovery               Boolean                    @default(false)
  isAdmin                  Boolean                    @default(false)
  active                   Boolean                    @default(true)
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  PersonsOnChurches        PersonsOnChurches[]
  Teacher                  Teacher[]
  StudantOnClass           StudantOnClass[]
  StudantOnLesson          StudantOnLesson[]
  CourseReading            CourseReading[]
  CourseEvaluationProgress CourseEvaluationProgress[]
  PersonDocument           PersonDocument[]

  @@map("People")
}

model PersonDocument {
  id            String   @id @default(cuid())
  person        Person   @relation(fields: [personId], references: [id])
  documentName  String
  documentValue String
  documentObs1  String?
  documentObs2  String?
  documentObs3  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  personId      String

  @@map("PersonDocuments")
}

model PersonsOnChurches {
  id           String         @id @default(cuid())
  person       Person         @relation(fields: [personId], references: [id])
  church       Church         @relation(fields: [churchId], references: [id])
  singnedAt    DateTime       @default(now())
  singnetBy    String
  member       Boolean        @default(true)
  dizimist     Boolean        @default(false)
  permitChurch Boolean        @default(true)
  permitEAD    Boolean        @default(false)
  permitPortal Boolean        @default(false)
  active       Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  personId     String
  churchId     String
  CellsNetwork CellsNetwork[]
  Cell         Cell[]

  @@map("PersonsOnChurches")
}

model CellsNetwork {
  id           String             @id @default(cuid())
  name         String
  color        String?
  image        String?
  supervisor   PersonsOnChurches? @relation(fields: [supervisorId], references: [id])
  active       Boolean            @default(true)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  supervisorId String?
  Cell         Cell[]

  @@map("CellsNetworks")
}

model Cell {
  id               String             @id @default(cuid())
  name             String
  color            String?
  image            String?
  day              String             @default("quarta-feira")
  hour             String             @default("20:00")
  method           String             @default("hibrid")
  leader           PersonsOnChurches  @relation(fields: [leaderId], references: [id])
  address          String?
  cellsNetwork     CellsNetwork       @relation(fields: [cellsNetworkId], references: [id])
  active           Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  leaderId         String
  cellsNetworkId   String
  Visitor          Visitor[]
  VisitorCell      VisitorCell[]
  VisitorConverted VisitorConverted[]
  VisitorBaptized  VisitorBaptized[]

  @@map("Cells")
}

model Visitor {
  id               String             @id @default(cuid())
  name             String
  image            String?
  date             DateTime           @default(now())
  cell             Cell               @relation(fields: [cellId], references: [id])
  active           Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  cellId           String
  VisitorConverted VisitorConverted[]
  VisitorBaptized  VisitorBaptized[]

  @@map("Visitors")
}

model VisitorCell {
  id        String   @id @default(cuid())
  name      String
  image     String?
  date      DateTime @default(now())
  cell      Cell     @relation(fields: [cellId], references: [id])
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cellId    String

  @@map("VisitorsOnCells")
}

model VisitorConverted {
  id        String   @id @default(cuid())
  name      String
  image     String?
  date      DateTime @default(now())
  cell      Cell?    @relation(fields: [cellId], references: [id])
  visitor   Visitor? @relation(fields: [visitorId], references: [id])
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cellId    String?
  visitorId String?

  @@map("VisitorsOnConverteds")
}

model VisitorBaptized {
  id        String   @id @default(cuid())
  name      String
  image     String?
  date      DateTime @default(now())
  cell      Cell?    @relation(fields: [cellId], references: [id])
  visitor   Visitor? @relation(fields: [visitorId], references: [id])
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cellId    String?
  visitorId String?

  @@map("VisitorsOnBaptizeds")
}

model Studant {
  id            String    @id @default(cuid())
  name          String
  genre         String    @default("M")
  birth         DateTime?
  email         String?   @unique
  hasPerson     Boolean   @default(false)
  localPassword String?
  statsLogin    String    @default("unchekble")
  active        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("studants")
}

model Teacher {
  id        String   @id @default(cuid())
  bio       String
  person    Person   @relation(fields: [personId], references: [id])
  church    Church   @relation(fields: [churchId], references: [id])
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  personId  String
  churchId  String

  @@map("teachers")
}

model CourseGroup {
  id        String   @id @default(cuid())
  name      String
  church    Church   @relation(fields: [churchId], references: [id])
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  churchId  String
  Course    Course[]

  @@map("courseGroups")
}

model Course {
  id               String             @id @default(cuid())
  name             String
  slug             String
  group            CourseGroup        @relation(fields: [courseGroupId], references: [id])
  description      String
  image            String?
  active           Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  courseGroupId    String
  CourseLesson     CourseLesson[]
  CourseClass      CourseClass[]
  CourseLibrary    CourseLibrary[]
  CourseEvaluation CourseEvaluation[]

  @@map("courses")
}

model CourseLesson {
  id              String            @id @default(cuid())
  name            String
  course          Course            @relation(fields: [courseId], references: [id])
  description     String
  isVideo         Boolean           @default(true)
  videoPlatform   String            @default("Youtube")
  type            String            @default("Online")
  videoIdentify   String?
  active          Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  courseId        String
  LessonFile      LessonFile[]
  StudantOnLesson StudantOnLesson[]

  @@map("coursesLessons")
}

model LessonFile {
  id             String       @id @default(cuid())
  lesson         CourseLesson @relation(fields: [courseLessonId], references: [id])
  name           String
  format         String       @default("pdf")
  url            String
  active         Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  courseLessonId String

  @@map("LessonFiles")
}

model CourseClass {
  id             String           @id @default(cuid())
  name           String
  course         Course           @relation(fields: [courseId], references: [id])
  active         Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  courseId       String
  StudantOnClass StudantOnClass[]

  @@map("CourseClasses")
}

model StudantOnClass {
  id            String      @id @default(cuid())
  studant       Person      @relation(fields: [personId], references: [id])
  class         CourseClass @relation(fields: [courseClassId], references: [id])
  active        Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  personId      String
  courseClassId String

  @@map("StudantOnClasses")
}

model StudantOnLesson {
  id             String       @id @default(cuid())
  studant        Person       @relation(fields: [personId], references: [id])
  lesson         CourseLesson @relation(fields: [courseLessonId], references: [id])
  active         Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  personId       String
  courseLessonId String

  @@map("StudantOnLessons")
}

model CourseLibrary {
  id                 String               @id @default(cuid())
  name               String
  writer             String
  image              String
  required           Boolean              @default(true)
  course             Course               @relation(fields: [courseId], references: [id])
  active             Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  courseId           String
  CourseLibraryQuest CourseLibraryQuest[]
  CourseReading      CourseReading[]

  @@map("CourseLibraries")
}

model CourseLibraryQuest {
  id                       String                     @id @default(cuid())
  library                  CourseLibrary              @relation(fields: [courseLibraryId], references: [id])
  title                    String
  active                   Boolean                    @default(true)
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  courseLibraryId          String
  CourseLibraryQuestOption CourseLibraryQuestOption[]
  CourseReadingResponse    CourseReadingResponse[]

  @@map("CourseLibraryQuests")
}

model CourseLibraryQuestOption {
  id                    String                  @id @default(cuid())
  quest                 CourseLibraryQuest      @relation(fields: [courseLibraryQuestId], references: [id])
  label                 String
  correct               Boolean                 @default(false)
  active                Boolean                 @default(true)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  courseLibraryQuestId  String
  CourseReadingResponse CourseReadingResponse[]

  @@map("CourseLibraryQuestOptions")
}

model CourseReading {
  id                    String                  @id @default(cuid())
  studant               Person                  @relation(fields: [personId], references: [id])
  library               CourseLibrary           @relation(fields: [courseLibraryId], references: [id])
  result                String
  stap                  String                  @default("new")
  active                Boolean                 @default(true)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  personId              String
  courseLibraryId       String
  CourseReadingResponse CourseReadingResponse[]

  @@map("CourseReadings")
}

model CourseReadingResponse {
  id                         String                   @id @default(cuid())
  reading                    CourseReading            @relation(fields: [courseReadingId], references: [id])
  quest                      CourseLibraryQuest       @relation(fields: [courseLibraryQuestId], references: [id])
  option                     CourseLibraryQuestOption @relation(fields: [courseLibraryQuestOptionId], references: [id])
  correct                    Boolean                  @default(false)
  active                     Boolean                  @default(true)
  createdAt                  DateTime                 @default(now())
  updatedAt                  DateTime                 @updatedAt
  courseReadingId            String
  courseLibraryQuestId       String
  courseLibraryQuestOptionId String

  @@map("CourseReadingResponses")
}

///////////////////////////////////////////////////////////////

model CourseEvaluation {
  id                       String                     @id @default(cuid())
  name                     String
  course                   Course                     @relation(fields: [courseId], references: [id])
  active                   Boolean                    @default(true)
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  courseId                 String
  CourseEvaluationQuest    CourseEvaluationQuest[]
  CourseEvaluationProgress CourseEvaluationProgress[]

  @@map("CourseEvaluation")
}

model CourseEvaluationQuest {
  id                               String                             @id @default(cuid())
  evaluation                       CourseEvaluation                   @relation(fields: [courseEvaluationId], references: [id])
  title                            String
  point                            Float                              @default(10)
  active                           Boolean                            @default(true)
  createdAt                        DateTime                           @default(now())
  updatedAt                        DateTime                           @updatedAt
  courseEvaluationId               String
  CourseEvaluationQuestOption      CourseEvaluationQuestOption[]
  CourseEvaluationProgressResponse CourseEvaluationProgressResponse[]

  @@map("CourseEvaluationQuests")
}

model CourseEvaluationQuestOption {
  id                               String                             @id @default(cuid())
  quest                            CourseEvaluationQuest              @relation(fields: [courseEvaluationQuestId], references: [id])
  label                            String
  correct                          Boolean                            @default(false)
  active                           Boolean                            @default(true)
  createdAt                        DateTime                           @default(now())
  updatedAt                        DateTime                           @updatedAt
  courseEvaluationQuestId          String
  CourseEvaluationProgressResponse CourseEvaluationProgressResponse[]

  @@map("CourseEvaluationQuestOptions")
}

model CourseEvaluationProgress {
  id                               String                             @id @default(cuid())
  studant                          Person                             @relation(fields: [personId], references: [id])
  evaluation                       CourseEvaluation                   @relation(fields: [courseEvaluationId], references: [id])
  result                           String
  stap                             String                             @default("new")
  active                           Boolean                            @default(true)
  createdAt                        DateTime                           @default(now())
  updatedAt                        DateTime                           @updatedAt
  personId                         String
  courseEvaluationId               String
  CourseEvaluationProgressResponse CourseEvaluationProgressResponse[]

  @@map("CourseEvaluationProgress")
}

model CourseEvaluationProgressResponse {
  id                            String                      @id @default(cuid())
  evaluation                    CourseEvaluationProgress    @relation(fields: [courseEvaluationProgressId], references: [id])
  quest                         CourseEvaluationQuest       @relation(fields: [courseEvaluationQuestId], references: [id])
  option                        CourseEvaluationQuestOption @relation(fields: [courseEvaluationQuestOptionId], references: [id])
  correct                       Boolean                     @default(false)
  active                        Boolean                     @default(true)
  createdAt                     DateTime                    @default(now())
  updatedAt                     DateTime                    @updatedAt
  courseEvaluationProgressId    String
  courseEvaluationQuestId       String
  courseEvaluationQuestOptionId String

  @@map("CourseEvaluationProgressResponses")
}
