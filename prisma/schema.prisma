generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
  //binaryTargets = ["native", "rhel-openssl-1.0.x"]
  output     = "../libs/prisma-client"
}

datasource db {
  provider = "mongodb"
  url      = "mongodb+srv://servicesapp:Bruno050709@cluster0.ejnyb.mongodb.net/smartChurch?retryWrites=true&w=majority"
  //url      = "mongodb://localhost:27017/smartChurch?authSource=admin&replicaSet=disable&retryWrites=true&w=majority"
}

model Church {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  fantasy           String?
  cnpj              String              @unique
  ie                String              @default("ISENTO")
  email             String?             @unique
  phone             String?
  shepherd          String
  image             String?
  active            Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  PersonsOnChurches PersonsOnChurches[]
  Teacher           Teacher[]
  CourseGroup       CourseGroup[]
  ChurchLink        ChurchLink[]

  @@index([phone, shepherd, createdAt(sort: Desc)])
  @@map("Churches")
}

model ChurchLink {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  church    Church   @relation(fields: [churchId], references: [id])
  churchId  String   @db.ObjectId
  position  String   @default("aside")
  title     String
  url       String
  icon      String
  blank     Boolean  @default(false)
  onEAD     Boolean  @default(true)
  onChurch  Boolean  @default(true)
  onPortal  Boolean  @default(true)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([createdAt(sort: Desc)])
  @@map("ChurchesLinks")
}

model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      Person   @relation(fields: [userId], references: [id])
  userAgent String?  @default("null")
  ipClient  String?  @default("null")
  platform  String?  @default("null")
  token     String?  @default("null")
  app       String
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId

  @@index([createdAt(sort: Desc)])
  @@map("Sessions")
}

model Person {
  id                            String                     @id @default(auto()) @map("_id") @db.ObjectId
  name                          String
  genre                         String                     @default("M")
  birth                         DateTime?
  photo                         String?
  email                         String?                    @unique
  password                      String?
  loginAttempts                 Int                        @default(3)
  statsLogin                    String                     @default("unchekble")
  inRecovery                    Boolean                    @default(false)
  isAdmin                       Boolean                    @default(false)
  TwoFactorAuthenticationActive Boolean                    @default(false)
  active                        Boolean                    @default(true)
  createdAt                     DateTime                   @default(now())
  updatedAt                     DateTime                   @updatedAt
  PersonsOnChurches             PersonsOnChurches[]
  Teacher                       Teacher[]
  StudantOnClass                StudantOnClass[]
  StudantOnLesson               StudantOnLesson[]
  CourseReading                 CourseReading[]
  CourseEvaluationProgress      CourseEvaluationProgress[]
  PersonDocument                PersonDocument[]
  CellsNetwork                  CellsNetwork[]
  Cell                          Cell[]
  Session                       Session[]
  TwoFactorAuthentication       TwoFactorAuthentication[]
  RecoveryToken                 RecoveryToken[]

  @@index([statsLogin, inRecovery, isAdmin, birth(sort: Desc), createdAt(sort: Desc)])
  @@map("People")
}

model RecoveryToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  person     Person   @relation(fields: [personId], references: [id])
  personId   String   @db.ObjectId
  token      String
  expiration DateTime
  active     Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([token, expiration(sort: Desc), createdAt(sort: Desc)])
  @@map("RecoveryTokens")
}

model TwoFactorAuthentication {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  person            Person   @relation(fields: [personId], references: [id])
  personId          String   @unique @db.ObjectId
  ascii             String
  hex               String
  base32            String
  otpauth_url       String
  recoveryCodeOne   String
  recoveryCodeTwo   String
  recoveryCodeThree String
  recoveryCodeFour  String
  recoveryCodeFive  String
  recoveryCodeSix   String
  recoveryCodeSeven String
  recoveryCodeEigth String
  recoveryCodeNine  String
  recoveryCodeTen   String
  activedIn         DateTime @default(now())
  active            Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([createdAt(sort: Desc)])
  @@map("TwoFactorAuthentications")
}

model PersonDocument {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  person        Person   @relation(fields: [personId], references: [id])
  documentName  String   @unique
  documentValue String
  documentObs1  String?
  documentObs2  String?
  documentObs3  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  personId      String   @db.ObjectId

  @@index([createdAt(sort: Desc)])
  @@map("PersonDocuments")
}

model PersonsOnChurches {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  person       Person   @relation(fields: [personId], references: [id])
  church       Church   @relation(fields: [churchId], references: [id])
  memberId     String?
  singnedAt    DateTime @default(now())
  singnetBy    String
  member       Boolean  @default(true)
  dizimist     Boolean  @default(false)
  permitChurch Boolean  @default(true)
  permitEAD    Boolean  @default(false)
  permitPortal Boolean  @default(false)
  active       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  personId     String   @db.ObjectId
  churchId     String   @db.ObjectId

  @@index([memberId, singnedAt(sort: Desc), createdAt(sort: Desc)])
  @@map("PersonsOnChurches")
}

model CellsNetwork {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  slug         String?
  color        String?
  image        String?
  supervisor   Person   @relation(fields: [supervisorId], references: [id])
  active       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  supervisorId String   @db.ObjectId
  Cell         Cell[]

  @@index([slug, supervisorId, createdAt(sort: Desc)])
  @@map("CellsNetworks")
}

model Cell {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  slug           String?
  color          String?
  image          String?
  day            String          @default("quarta-feira")
  hour           String          @default("20:00")
  method         String          @default("hibrid")
  leader         Person          @relation(fields: [leaderId], references: [id])
  address        String?
  cellsNetwork   CellsNetwork    @relation(fields: [cellsNetworkId], references: [id])
  active         Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  leaderId       String          @db.ObjectId
  cellsNetworkId String          @db.ObjectId
  Visitor        VisitorOnCult[]
  VisitorCell    VisitorCell[]

  @@index([slug, day, method, leaderId, address, cellsNetworkId, createdAt(sort: Desc)])
  @@map("Cells")
}

model VisitorOnCult {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  idMaster  String?  @default("FIRST")
  idMember  String?  @default("NOT_MEMBER")
  name      String
  image     String?
  date      DateTime @default(now())
  cell      Cell?    @relation(fields: [cellId], references: [id])
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cellId    String?  @db.ObjectId
  converted Boolean  @default(false)
  baptized  Boolean  @default(false)

  @@index([idMaster, idMember, date(sort: Desc), name, createdAt(sort: Desc)])
  @@map("Visitors")
}

model VisitorCell {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  idMaster  String?  @default("FIRST")
  idMember  String?  @default("NOT_MEMBER")
  name      String
  image     String?
  date      DateTime @default(now())
  cell      Cell     @relation(fields: [cellId], references: [id])
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cellId    String   @db.ObjectId
  converted Boolean  @default(false)

  @@index([idMaster, idMember, date(sort: Desc), name, createdAt(sort: Desc)])
  @@map("VisitorsOnCells")
}

model Teacher {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  bio          String
  person       Person         @relation(fields: [personId], references: [id])
  church       Church         @relation(fields: [churchId], references: [id])
  active       Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  personId     String         @db.ObjectId
  churchId     String         @db.ObjectId
  CourseClass  CourseClass[]
  CourseLesson CourseLesson[]

  @@index([personId, churchId, createdAt(sort: Desc)])
  @@map("teachers")
}

model CourseGroup {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  slug      String?
  church    Church   @relation(fields: [churchId], references: [id])
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  churchId  String   @db.ObjectId
  Course    Course[]

  @@index([slug, churchId, createdAt(sort: Desc)])
  @@map("courseGroups")
}

model Course {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  slug             String?
  curseGroup       CourseGroup        @relation(fields: [courseGroupId], references: [id])
  description      String
  image            String?
  active           Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  courseGroupId    String             @db.ObjectId
  CourseLesson     CourseLesson[]
  CourseClass      CourseClass[]
  CourseLibrary    CourseLibrary[]
  CourseEvaluation CourseEvaluation[]

  @@index([slug, createdAt(sort: Desc)])
  @@map("courses")
}

model CourseLesson {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  slug            String?
  course          Course            @relation(fields: [courseId], references: [id])
  description     String
  isVideo         Boolean           @default(true)
  videoPlatform   String            @default("Youtube")
  type            String            @default("Online")
  videoIdentify   String?
  active          Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  courseId        String            @db.ObjectId
  teacher         Teacher?          @relation(fields: [teacherId], references: [id])
  teacherId       String?           @db.ObjectId
  LessonFile      LessonFile[]
  StudantOnLesson StudantOnLesson[]

  @@index([slug, videoIdentify, createdAt(sort: Desc)])
  @@map("coursesLessons")
}

model LessonFile {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  lesson         CourseLesson @relation(fields: [courseLessonId], references: [id])
  name           String
  format         String       @default("pdf")
  url            String
  active         Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  courseLessonId String       @db.ObjectId

  @@index([format, createdAt(sort: Desc)])
  @@map("LessonFiles")
}

model CourseClass {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  slug           String
  course         Course           @relation(fields: [courseId], references: [id])
  active         Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  courseId       String           @db.ObjectId
  teacher        Teacher?         @relation(fields: [teacherId], references: [id])
  teacherId      String?          @db.ObjectId
  StudantOnClass StudantOnClass[]

  @@index([slug, teacherId, courseId, createdAt(sort: Desc)])
  @@map("CourseClasses")
}

model StudantOnClass {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  studant         Person            @relation(fields: [studantId], references: [id])
  class           CourseClass       @relation(fields: [courseClassId], references: [id])
  active          Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  studantId       String            @db.ObjectId
  courseClassId   String            @db.ObjectId
  StudantOnLesson StudantOnLesson[]

  @@index([studantId, courseClassId, createdAt(sort: Desc)])
  @@map("StudantOnClasses")
}

model StudantOnLesson {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  studant        Person         @relation(fields: [studantId], references: [id])
  lesson         CourseLesson   @relation(fields: [courseLessonId], references: [id])
  studantOnClass StudantOnClass @relation(fields: [studantOnClassId], references: [id])

  presence         Boolean?  @default(false)
  eadTime          String?   @default("0")
  eadStatus        String?   @default("UNSUBSCRIBED")
  eadViewDate      DateTime?
  active           Boolean   @default(true)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  studantId        String    @db.ObjectId
  courseLessonId   String    @db.ObjectId
  studantOnClassId String    @db.ObjectId

  @@index([courseLessonId, eadStatus, studantId, createdAt(sort: Desc)])
  @@map("StudantOnLessons")
}

model CourseLibrary {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  slug               String?
  writer             String
  image              String
  required           Boolean              @default(true)
  course             Course               @relation(fields: [courseId], references: [id])
  active             Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  courseId           String               @db.ObjectId
  CourseLibraryQuest CourseLibraryQuest[]
  CourseReading      CourseReading[]

  @@index([slug, writer, courseId, createdAt(sort: Desc)])
  @@map("CourseLibraries")
}

model CourseLibraryQuest {
  id                       String                     @id @default(auto()) @map("_id") @db.ObjectId
  library                  CourseLibrary              @relation(fields: [courseLibraryId], references: [id])
  title                    String
  active                   Boolean                    @default(true)
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  courseLibraryId          String                     @db.ObjectId
  CourseLibraryQuestOption CourseLibraryQuestOption[]
  CourseReadingResponse    CourseReadingResponse[]

  @@index([courseLibraryId, createdAt(sort: Desc)])
  @@map("CourseLibraryQuests")
}

model CourseLibraryQuestOption {
  id                    String                  @id @default(auto()) @map("_id") @db.ObjectId
  quest                 CourseLibraryQuest      @relation(fields: [courseLibraryQuestId], references: [id])
  label                 String
  correct               Boolean                 @default(false)
  active                Boolean                 @default(true)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  courseLibraryQuestId  String                  @db.ObjectId
  CourseReadingResponse CourseReadingResponse[]

  @@index([courseLibraryQuestId, createdAt(sort: Desc)])
  @@map("CourseLibraryQuestOptions")
}

model CourseReading {
  id                    String                  @id @default(auto()) @map("_id") @db.ObjectId
  studant               Person                  @relation(fields: [studantId], references: [id])
  library               CourseLibrary           @relation(fields: [courseLibraryId], references: [id])
  result                String
  stap                  String                  @default("new")
  active                Boolean                 @default(true)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  studantId             String                  @db.ObjectId
  courseLibraryId       String                  @db.ObjectId
  CourseReadingResponse CourseReadingResponse[]

  @@index([stap, courseLibraryId, studantId, result, createdAt(sort: Desc)])
  @@map("CourseReadings")
}

model CourseReadingResponse {
  id                         String                   @id @default(auto()) @map("_id") @db.ObjectId
  reading                    CourseReading            @relation(fields: [courseReadingId], references: [id])
  quest                      CourseLibraryQuest       @relation(fields: [courseLibraryQuestId], references: [id])
  option                     CourseLibraryQuestOption @relation(fields: [courseLibraryQuestOptionId], references: [id])
  correct                    Boolean                  @default(false)
  active                     Boolean                  @default(true)
  createdAt                  DateTime                 @default(now())
  updatedAt                  DateTime                 @updatedAt
  courseReadingId            String                   @db.ObjectId
  courseLibraryQuestId       String                   @db.ObjectId
  courseLibraryQuestOptionId String                   @db.ObjectId

  @@index([courseLibraryQuestId, courseLibraryQuestOptionId, createdAt(sort: Desc)])
  @@map("CourseReadingResponses")
}

///////////////////////////////////////////////////////////////

model CourseEvaluation {
  id                       String                     @id @default(auto()) @map("_id") @db.ObjectId
  name                     String
  course                   Course                     @relation(fields: [courseId], references: [id])
  active                   Boolean                    @default(true)
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  courseId                 String                     @db.ObjectId
  CourseEvaluationQuest    CourseEvaluationQuest[]
  CourseEvaluationProgress CourseEvaluationProgress[]

  @@index([courseId, createdAt(sort: Desc)])
  @@map("CourseEvaluation")
}

model CourseEvaluationQuest {
  id                               String                             @id @default(auto()) @map("_id") @db.ObjectId
  evaluation                       CourseEvaluation                   @relation(fields: [courseEvaluationId], references: [id])
  title                            String
  point                            Float                              @default(10)
  active                           Boolean                            @default(true)
  createdAt                        DateTime                           @default(now())
  updatedAt                        DateTime                           @updatedAt
  courseEvaluationId               String                             @db.ObjectId
  CourseEvaluationQuestOption      CourseEvaluationQuestOption[]
  CourseEvaluationProgressResponse CourseEvaluationProgressResponse[]

  @@index([courseEvaluationId, createdAt(sort: Desc)])
  @@map("CourseEvaluationQuests")
}

model CourseEvaluationQuestOption {
  id                               String                             @id @default(auto()) @map("_id") @db.ObjectId
  quest                            CourseEvaluationQuest              @relation(fields: [courseEvaluationQuestId], references: [id])
  label                            String
  correct                          Boolean                            @default(false)
  active                           Boolean                            @default(true)
  createdAt                        DateTime                           @default(now())
  updatedAt                        DateTime                           @updatedAt
  courseEvaluationQuestId          String                             @db.ObjectId
  CourseEvaluationProgressResponse CourseEvaluationProgressResponse[]

  @@index([courseEvaluationQuestId, createdAt(sort: Desc)])
  @@map("CourseEvaluationQuestOptions")
}

model CourseEvaluationProgress {
  id                               String                             @id @default(auto()) @map("_id") @db.ObjectId
  studant                          Person                             @relation(fields: [studantId], references: [id])
  evaluation                       CourseEvaluation                   @relation(fields: [courseEvaluationId], references: [id])
  result                           String
  stap                             String                             @default("new")
  active                           Boolean                            @default(true)
  createdAt                        DateTime                           @default(now())
  updatedAt                        DateTime                           @updatedAt
  studantId                        String                             @db.ObjectId
  courseEvaluationId               String                             @db.ObjectId
  CourseEvaluationProgressResponse CourseEvaluationProgressResponse[]

  @@index([stap, studantId, courseEvaluationId, result, createdAt(sort: Desc)])
  @@map("CourseEvaluationProgress")
}

model CourseEvaluationProgressResponse {
  id                            String                      @id @default(auto()) @map("_id") @db.ObjectId
  evaluation                    CourseEvaluationProgress    @relation(fields: [courseEvaluationProgressId], references: [id])
  quest                         CourseEvaluationQuest       @relation(fields: [courseEvaluationQuestId], references: [id])
  option                        CourseEvaluationQuestOption @relation(fields: [courseEvaluationQuestOptionId], references: [id])
  correct                       Boolean                     @default(false)
  active                        Boolean                     @default(true)
  createdAt                     DateTime                    @default(now())
  updatedAt                     DateTime                    @updatedAt
  courseEvaluationProgressId    String                      @db.ObjectId
  courseEvaluationQuestId       String                      @db.ObjectId
  courseEvaluationQuestOptionId String                      @db.ObjectId

  @@index([courseEvaluationProgressId, courseEvaluationQuestId, courseEvaluationQuestOptionId, createdAt(sort: Desc)])
  @@map("CourseEvaluationProgressResponses")
}
